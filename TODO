Todo on LinBox (current as of 11.4.2011)

In general:
• Bugs
  ∘ Compiler sometimes refusing to instantiate with TransposeMatrix
  ∘ benchmark-matrix-domain doesn't print anything unless one gives -l -m -n -k???
  ∘ Apparent bugs in M4RI
    ‣ mzd_read_bit seems to ignore offset
    ‣ Segfault on termination if mzd_free is called on _rep before resize
    ‣ Lots of failures with ElectricFence (free did not come from malloc)
    ‣ Does not appear to work with submatrices -- need further investigation
  ∘ Cannot compile on both 32-bit and 64-bit machines
    ‣ uint64 is long on 64-bit and long long on 32-bit, but M4RI-word is always long long
    ‣ So on 32-bit the specialisation of WordTraits to word is superfluous, but on 64-bit it's required
• API-changes
  ∘ Change interface of inv and div: return bool; true if successful, false otherwise
  ∘ trsv should fail if the input-matrix is not nonsingular upper triangular (or at least with nonzero entries along the diagonal)
  ∘ Figure out archetype/abstract/envelope business
    ‣ Do we need archetype at all (except for documentation)? Maybe merge with abstract
    ‣ Do we need envelope at all?
• Candidates for review/removal
  ∘ linbox/util/formats? (maybe incorporate into linbox/matrix/io.{h|inl}
  ∘ RandomDenseStreamGF2, RandomSparseStreamGF2 <- Do we use these at all?
  ∘ dense-submatrix.h, .inl
• Missing specialisations, new wrappers
  ∘ Incorporate FFLAS/FFPACK into the rest of LinBox
    ‣ Some of FFLAS can go away -- it just duplicates functionality in MatrixDomain
    ‣ Part of FFLAS should become a MatrixDomain-BLAS wrapper
    ‣ Other important part of FFLAS is Straßen-Winograd implementation, which should go into another MatrixDomain-wrapper
    ‣ Most of FFPACK should be put aside for the time being, but contents of ffpack.h are useful and should go into algorithms
    ‣ Everything needs to be reindented and reformated, of course
• Sort out business with optional libraries, preferred matrix-type, etc.
• Documentation-issues
  ∘ Need to document vector-formats -- maybe in vector-traits.h
• Improvements to GaussJordan:
  ∘ Make ReduceRowEchelonForm use trsm and block-decomposition -- then maybe also eliminate specialisations
  ∘ Specialisation for M4RIMatrix which just calls M4RI-backend
  ∘ Do non-reducing version of GaussJordan
    ‣ Can we pack U into A and use triangular methods here?
  ∘ Move support-routines (GetPivot, SetIdentity, FastAddin) into other classes and create unit-tests for them
• Improvements to build-process:
  ∘ Make the library compile standard instantiations for all non-inline functionality
  ∘ Non-inline stuff goes into new files *.tcc while inline stuff goes into *.h
    ‣ Implementations in vector-domain.inl, matrix-domain.inl, vector-domain-gf2.inl, matrix-domain-gf2.inl are ready to go
    ‣ Iterators in vector, matrix implementations should be moved into header files
    ‣ SubvectorFactory-specialisations should be moved to header files
    ‣ Otherwise sparse.inl is ready to go
    ‣ All of dense.inl should be placed in dense.h
    ‣ Likewise dense-zero-one.inl
    ‣ Functions in sparse-zero-one.h should be moved to sparse-zero-one.tcc
    ‣ Implementations of Stream::get should go in stream.tcc
    ‣ Contents of gf2.inl should go into gf2.h and (specialisations of streams) to vector/stream-gf2.h, with get-implementation in vector/stream-gf2.tcc
    ‣ Short functions in bit-vector.inl should go in bit-vector.h, otherwise good to go
    ‣ Pretty well all of bit-subvector.inl should go into .h file
    ‣ Most of sparse-subvector-hybrid.inl should go into .h file, except long function-implementations
    ‣ field/modular.inl is good to go
    ‣ Contents m4ri-matrix.inl should go to .h file; read/write can be removed
    ‣ Contents of submatrix.inl should go into .h file
    ‣ io.inl is good to go
• Improvements to test-suite
  ∘ Need tests for vectors
  ∘ Improve MatrixDomain tests
    ‣ Add tests for MatrixDomainM4RI, MatrixDomainBLAS, etc.
      • MatrixDomainBLAS-tests await work on FFLAS
    ‣ More mixtures of matrix-, and vector-formats (need careful review of what is tested)
  ∘ Incorporate tests in F4 to test-suite
    ‣ test-gauss-jordan depends on incorporation of Gauss-Jordan transform into LinBox
  ∘ Enhance tests for HybridVector: offset 0-related cases in SparseSubvector<Hybrid>
  ∘ test-gauss-jordan needs to test more than just GF2-case (!)
  ∘ Move GaussJordan::testFastAddinHybridVector to tests and eliminate RunTests
• API-changes
  ∘ Change interface of inv and div: return bool; true if successful, false otherwise
  ∘ trsv should fail if the input-matrix is not nonsingular upper triangular (or at least with nonzero entries along the diagonal)
  ∘ Figure out archetype/abstract/envelope business
    ‣ Do we need archetype at all (except for documentation)? Maybe merge with abstract
    ‣ Do we need envelope at all?
    ‣ Create matrix archetype to document interfaces
    ‣ Remove redundant documentation from matrices
• Robustness/safety issues
  ∘ Fix Commentator so that it passes valgrind
  ∘ Valgrind everything else

Lower priority:
• Output-improvements to Commentator?
• Remove some matrix output-formats
• Create mechanism for "preferred matrix-type" over a given field which can be changed according to available libraries
• Replace "namespace LinBox" with macro to fix indentation-sillyness
• Replace __LINBOX_BITVECTOR_WORD_TYPE with a typedef
• Simplifications to BitSubvectorIterator: move mask-computation to BitSubvector, have iterator in BitSubvector which points to position at which mask is required
• Move random GF2-streams to new vector/stream-gf2.h
• Improvements to MatrixDomain
  ∘ Function to read a permutation from stream
  ∘ Move writePermutation to VectorDomain and add a call-through in MatrixDomain?
• Merge FieldTraits and ModularFieldTraits
• Rename MatrixTraits::BlackboxTag to something sensible
• Reorganise MatrixTraits:
  ∘ MatrixCategory (Sparse, Dense)
  ∘ MatrixIteratorCategory (Row, Col, RowCol)
  ∘ MatrixEntryCategory (Element, ZeroOne)
• Merge BitSubvectorWordAligned into BitVector (maybe using same model as SparseVector)
• PLUQ-decomposition

Fuzzy/not sure what to do yet:
• Merge gemvColDense into MatrixDomainSupport
• Eliminate/merge FieldAXPY?
• Simplify class-hierarchy surrounding MatrixDomain?
• Move DotProductDomain into VectorDomain?
• Try to consolidate the myriad field/modular-* files, since they are all almost identical

For F4-backend:
• Make hybrid zero-one matrix more memory-efficient by reducing space-requirements for index-vectors
  ∘ Reuse existing index-vectors
  ∘ Overlay index-vectors with small additional vectors to reflect small changes
  ∘ Need an algorithm which does all of this efficiently
• Improve matrix-multiplication with hybrid-matrices (!)
  ∘ Way to incorporate M4RI?
  ∘ Way to use Method of 4 Russians for Multiplication?
• Word-aligned version of SparseSubvector<Hybrid>
  ∘ Almost possible by using "wrong" specialisation (to SparseVectorTag) of SparseSubvector
  ∘ Just need that the resulting vector define Endianness, word_type, index_type
• Update elimination-code to use above version
