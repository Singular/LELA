Todo on LinBox (current as of 7.7.2011)

Critical (before leaving):
  • ZpModule-work
  • Integrate Strassen-Winograd
  • Profiling-system to check which arithmetic is being used
  • Build-system for documentation
  • Customised allocator everywhere
  • Writing to sparse subvectors
  • Work on test-suite
    ∘ Test for vectors
    ∘ Consistency-check for specialised modules against generic module
    ∘ Generic tests should compare different matrix, vector-types
    ∘ Consolidate test-generic-for-quad.h into test-ring.h
  • Things fail badly with new version of M4RI: failed assert on mzd_row

In general:
  • Bugs
    ∘ Compiler sometimes refusing to instantiate with TransposeMatrix
    ∘ benchmark-matrix-domain doesn't print anything unless one gives -l -m -n -k???
    ∘ Apparent bugs in M4RI
      ‣ mzd_read_bit seems to ignore offset
      ‣ Segfault on termination if mzd_free is called on _rep before resize
      ‣ Lots of failures with ElectricFence (free did not come from malloc)
      ‣ copy, equality tests do not work when one argument not word-aligned
      ‣ mul and addmul do not work when destination-matrix isn't word-aligned
    ∘ GF2 dot into BitVectorReference does not appear to work (see trsvSpecialized(RowMatrixTag, DenseZeroOneVectorTag))
    ∘ trmm, trsm tests in test-matrix-domain.h if M1 is not square
  • Things not caught in existing test-suite:
    ∘ BitReference using &-operator with bool
    ∘ Ditto dense/sparse dot-product over GF2
    ∘ Array-access not working with BitVector?
    ∘ Use of M4RI-solve calls on the wrong side in trsm, trmm
    ∘ hasDim doesn't work on sparse subvectors
    ∘ GaussJordan seems to be giving wrong answer on really large matrices (try F4-solver whilst disabling M4RI)???
    ∘ trsv, trmm, trmv on empty matrices crashes
    ∘ std::swap not specialised for subvectors (so BLAS3::permute on dense matrices doesn't actually permute anything)
    ∘ MutableSubvector::resize copies to the wrong destination-index
    ∘ MakeSubvector for columns in DenseMatrix used coldim () for displacement rather than disp () as it should have
    ∘ Modifications to BitSubvector::word_reference cause trmm to fail
    ∘ (Submatrix case) Test for permutations on GF2 passes even though output shows it's clearly wrong
    ∘ copy_impl (DenseZeroOne, HybridZeroOne) wasn't getting last word
    ∘ back_word on BitSubvectorWordAligned returning *_end rather than *(_end - 1)
    ∘ equal_impl == false, is_zero_impl == false should also be tested
    ∘ equal (DenseZeroOne, HybridZeroOne) would fail if the input-vector was one word or less
    ∘ swap (BitSubvectorWordAligned) did not touch back_word ()
    ∘ copy from hybrid to dense subvector where end is not word-aligned overwrote rest of last word
    ∘ dot-product(BitSubvector, Hybrid) broken
    ∘ BitSubvector::word_iterator::operator = not copying _ref._m.full, so _ref._m not always properly initialised
    ∘ When BitSubvector has length == WordTraits::bits and is word-aligned, word_end_reference::mask == 0 while wordBegin () == wordEnd ()
    ∘ BitSubvector::word_iterator::operator + called constructor without passing _shift
    ∘ BLAS1::head(DenseZeroOneVector) not checking back_word ()
    ∘ GaussJordan::StandardRowEchelonForm crash when L is not a valid matrix and compute_L == false
    ∘ permute_rows, etc. might not actually do anything
  • Way to configure intermediate matrix-types used by F4Solver
  • Improvements to Hybrid subvector:
    ∘ Add support for specifying the start-iterator in a hybrid subvector directly so as to save one binary search on each construction
      ‣ Change attach_block and Splicer accordingly
    ∘ Exploit sentries in HybridVector to reduce cases which need to be checked
  • Missing specialisations of GF2 dot: hybrid/hybrid, hybrid/sparse
  • SparseSubvector specialisation to SparseVectorTag is really a specialisation to SparseVector only, since it depends on more than just the interface of std::vector<std::pair<...> >

Work for HiWi
  • Improvements to build-process:
    ∘ Make the library compile standard instantiations for all non-inline functionality
    ∘ Non-inline stuff goes into new files *.tcc while inline stuff goes into *.h
      ‣ Implementations of Stream::get should go in stream.tcc
      ‣ Contents of gf2.inl should go into gf2.h and (specialisations of streams) to vector/stream-gf2.h, with get-implementation in vector/stream-gf2.tcc
  • Improvements to test-suite:
    ∘ Enhance tests for HybridVector: offset 0-related cases in SparseSubvector<Hybrid>
    ∘ diagIsOne in tr{s|m}{m|v} should be properly tested (true case tested only indirectly at the moment)
    ∘ Consolidate upper, lower triangular variants of trmm, trsm tests to one function
    ∘ Improvements to tests for hybrid-vectors: current tests make no attempt to ensure that the vectors have sufficient gaps (maybe create a new type of VectorStream for this situation)
    ∘ Test for EchelonForm
    ∘ Meaningful unit-tests for Splicer
    ∘ No direct test for BLAS1::permute
    ∘ No direct test for BLAS1::read, BLAS1::write
  • Robustness/safety issues
    ∘ Fix Commentator so that it passes valgrind
    ∘ Valgrind everything else

Lower priority:
  • Output-improvements to Commentator?
  • Remove some matrix output-formats
  • Create mechanism for "preferred matrix-type" over a given field which can be changed according to available libraries
  • Replace "namespace LinBox" with macro to fix indentation-sillyness
  • Replace __LINBOX_BITVECTOR_WORD_TYPE with a typedef
  • Improvements to MatrixDomain
    ∘ Function to read a permutation from stream
  • Merge FieldTraits and ModularFieldTraits
  • Merge BitSubvectorWordAligned into BitVector (maybe using same model as SparseVector)
  • PLUQ-decomposition
  • When type is invalid, tr{s|m}m should throw exception rather than silently doing nothing
  • Solutions for det, rank
  • Right-hand versions of trsm, trmm
  • Take attach_block from Splicer and make new appendSubvector in VectorWrapper; write tests for this
    ∘ Similiar with attach_e_i
  • Improvements to GaussJordan:
    ∘ Make ReduceRowEchelonForm use trsm and block-decomposition -- then maybe also eliminate specialisations
    ∘ Move support-routines (GetPivot, SetIdentity, FastAddin) into other classes and create unit-tests for them
  • Naming-convention: ConstBlah/Blah vs. Blah/MutableBlah?

For F4-backend:
  • Make hybrid zero-one matrix more memory-efficient by reducing space-requirements for index-vectors
    ∘ Reuse existing index-vectors
    ∘ Overlay index-vectors with small additional vectors to reflect small changes
    ∘ Need an algorithm which does all of this efficiently
  • Improve matrix-multiplication with hybrid-matrices (!)
    ∘ Way to incorporate M4RI?
    ∘ Way to use Method of 4 Russians for Multiplication?
